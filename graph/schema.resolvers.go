package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fitfinance/graph/model"

	"github.com/labstack/gommon/log"
	"go.mongodb.org/mongo-driver/bson"
)

// UpdateFitnessData is the resolver for the updateFitnessData field.
func (r *mutationResolver) UpdateFitnessData(ctx context.Context, input model.FitnessDataInput) (*model.FitnessData, error) {
	log.Info("Updating fitness data")
	collection := r.DbClient.Database("Fitness").Collection("FitnessData")

	log.Info("Collection", collection)
	data := &model.FitnessData{
		UserID:    input.UserID,
		Date:      input.Date,
		StepCount: input.StepCount,
		Gym:       input.Gym,
		Sport:     input.Sport,
	}
	if data.Sport {
		data.SportType = input.SportType
		data.Duration = input.Duration
	}
	log.Info(data)
	result, err := collection.InsertOne(ctx, data)
	if err != nil {
		log.Error("Error occured while inserting to db")
	} else {
		log.Infof("Inserted with id:", result.InsertedID)
	}
	return data, err
}

// GetFitnessData is the resolver for the getFitnessData field.
func (r *queryResolver) GetFitnessData(ctx context.Context) (*model.FitnessData, error) {
	log.Info("Fetching fitness data")
	collection := r.DbClient.Database("Fitness").Collection("FitnessData")

	filter := bson.D{{"userid", 1}}
	cursor, err := collection.Find(ctx, filter)
	if err != nil {
		log.Error("Error fetching the fitness data")
	}

	var results []model.FitnessData
	if err = cursor.All(ctx, &results); err != nil {
		log.Error("Error reading the fitness results")
	}

	data := &model.FitnessData{}
	for _, result := range results {
		data.StepCount += result.StepCount
	}

	return data, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
